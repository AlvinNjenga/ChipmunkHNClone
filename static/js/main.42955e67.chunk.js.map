{"version":3,"sources":["components/Input.js","components/SearchBar.js","components/Dropdowns.js","components/FilterBar.js","components/ListItem.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Input","returnSearchBar","event","_this","props","getSearchBar","target","value","react_default","a","createElement","onChange","this","className","type","placeholder","Component","SearchBar","components_Input","Dropdowns","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeTime","setState","dropdownTime","getTime","state","id","bind","FilterBar","components_Dropdowns","ListItem","getNews","time","Axios","get","error","console","log","getTimeNews","Date","now","countFeed","then","response","data","hits","filteredApi","Array","from","filter","item","title","toLowerCase","includes","searchBar","author","api","catch","map","key","href","url","points","num_comments","name","List","components_ListItem","returnApi","getApi","App","components_SearchBar","components_FilterBar","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.42955e67.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Input extends Component {\r\n\r\n    returnSearchBar = (event) => {\r\n        this.props.getSearchBar(event.target.value)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <input \r\n            onChange={this.returnSearchBar}\r\n            className=\"searchbar-input\" \r\n            type=\"text\" \r\n            placeholder=\"Search stories by title, url or author\">\r\n            </input>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input;","import React, { Component } from 'react';\r\nimport Input from './Input'\r\n\r\nclass SearchBar extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"row d-flex justify-content-center\">\r\n                <div className=\"col-lg-9 search-wrapper\">\r\n                    <div className=\"logo text-left\">\r\n                        <h5>Chipmunk's<br></br>Hacker News</h5>\r\n                    </div>\r\n                    <Input getSearchBar={this.props.getSearchBar} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React, { Component } from 'react';\r\n\r\nclass Dropdowns extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            dropdownTime: \"alltime\"\r\n        }\r\n    }\r\n\r\n    changeTime = (event) => {\r\n        this.setState({\r\n            dropdownTime: event.target.value\r\n        })\r\n        this.props.getTime(event.target.value);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"dropdown-wrapper d-flex\">\r\n\r\n                <div id=\"stories-dropdown\" className=\"dropdowny d-flex\">\r\n                    <p className=\"dropdown-title\">Search</p>\r\n                    <div className=\"stories-select\">\r\n                        <select>\r\n                            <option value=\"stories\">Stories</option>\r\n                            <option value=\"all\">All</option>\r\n                            <option value=\"comments\">Comments</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"popularity-dropdown\" className=\"dropdowny d-flex\">\r\n                    <p className=\"dropdown-title\">by</p>\r\n                    <div className=\"popularity-select\">\r\n                        <select>\r\n                            <option value=\"popularity\">Popularity</option>\r\n                            <option value=\"date\">Date</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"alltime-dropdown\" className=\"dropdowny d-flex\">\r\n                    <p className=\"dropdown-title\">for</p>\r\n                    <div className=\"alltime-select\">\r\n                        <select id=\"time-dropdown\" onChange={this.changeTime.bind(this)}>\r\n                            <option value=\"alltime\">All Time</option>\r\n                            <option value=\"past24h\">Past 24hrs</option>\r\n                            <option value=\"lastweek\">Last Week</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dropdowns;","import React, { Component } from 'react';\r\nimport Dropdowns from './Dropdowns'\r\n\r\nclass FilterBar extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"row d-flex justify-content-center\">\r\n                <div className=\"col-lg-9 d-flex justify-content-between filterbar\">\r\n                    <Dropdowns getTime={this.props.getTime} />\r\n                    <p>\r\n                        Temporarily filler text\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterBar;","import React, { Component } from 'react';\r\nimport Axios from 'axios'\r\n\r\nclass ListItem extends Component{\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            api: []\r\n        }\r\n    }\r\n\r\n    // This is my makeshift router based on the props recieved from dropdown menu's!\r\n    getNews = () => {\r\n\r\n        switch(this.props.time){\r\n            case \"lastweek\":\r\n                try {\r\n                    return Axios.get('https://hn.algolia.com/api/v1/search_by_date?tags=story&numericFilters=created_at_i%3E2018-11-27T02:15:20.000Z')\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n                break;\r\n            case \"past24h\":\r\n                try {\r\n                    return Axios.get('https://hn.algolia.com/api/v1/search_by_date?tags=story&numericFilters=created_at_i%3E2018-12-04T02:15:20.000Z')\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n                break;\r\n            default:\r\n                try {\r\n                    return Axios.get('https://hn.algolia.com/api/v1/search?tags=front_page')\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n                \r\n        }\r\n       \r\n    }\r\n\r\n    //Need to see if this function will be any use - maybe use Moment.js\r\n    getTimeNews = () => {\r\n        try {\r\n            var yesterday = new Date(Date.now() - 86400000);\r\n            return Axios.get(`http://hn.algolia.com/api/v1/search_by_date?tags=comment&numericFilters=created_at_i>X`)\r\n        } catch (error){\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    // Called whenever the component mounts and updates. This calls the API and filters results along\r\n    // whatever is entered in SearchBar.\r\n    countFeed = () => {\r\n        const feed = this.getNews()\r\n            .then(response => {\r\n                if (response.data.hits){\r\n                    let apiData = Array.from(response.data.hits);\r\n                    let filteredApi = apiData.filter((item) => {\r\n                        return item.title.toLowerCase().includes(this.props.searchBar.toLowerCase()) \r\n                        || item.author.toLowerCase().includes(this.props.searchBar.toLowerCase()) ;\r\n                     })\r\n                     this.setState({\r\n                         api: filteredApi\r\n                     })\r\n                } \r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.countFeed();\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.countFeed();\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n\r\n            this.state.api.map((item) => {\r\n                return (\r\n                    <div className=\"list-item\">\r\n                        <p className=\"list-content\" key={item.title}><a href={item.url}>{item.title}</a></p>\r\n                        <div className=\"list-info-wrapper\">\r\n                            <p className=\"list-info\">{item.points} points</p>\r\n                            <p className=\"list-info\" key={item.author}>{item.author}</p>\r\n                            <p className=\"list-info\">Generic info for now.</p>\r\n                            <p className=\"list-info\" key={item.num_comments}>{item.num_comments} comments</p>\r\n                            <p className=\"list-info list-info-last\" key={item.url}><a href={item.url}>({item.url})</a></p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListItem;\r\n\r\n// countFeed = () => {\r\n//     const feed = this.getNews()\r\n//         .then(response => {\r\n//             if (response.data.hits && this.props.searchBar === \"\"){\r\n//                 let apiData = Array.from(response.data.hits);\r\n//                 this.setState({api: apiData})\r\n//             } else if (response.data.hits && this.props.searchBar !== \"\"){\r\n//                 let filteredApi = this.state.api.filter((item) => {\r\n//                     return item.title.toLowerCase().includes(this.props.searchBar.toLowerCase()) \r\n//                     || item.author.toLowerCase().includes(this.props.searchBar.toLowerCase()) ;\r\n//                 })\r\n//                 this.setState({\r\n//                     api: filteredApi\r\n//                 })\r\n//             }\r\n//         })\r\n//         .catch(error => {\r\n//             console.log(error)\r\n//         })\r\n// }","import React, { Component } from 'react'\r\nimport ListItem from './ListItem'\r\n\r\nconst data = [{\"name\":\"This is other random text\"},{\"name\":\"This is random text\"},{\"name\":\"This is even more random text\"}];\r\n\r\nclass List extends Component{\r\n\r\n    \r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            data: data,\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"row d-flex justify-content-center\">\r\n                <div className=\"col-lg-9 list-parent\">\r\n                    <ListItem returnApi={this.props.getApi} searchBar={this.props.searchBar} time={this.props.time} data={this.state.data} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport FilterBar from './components/FilterBar';\nimport List from './components/List'\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      time:'',\n      searchBar: '',\n      filteredApi: [],\n      api: []\n    }\n  }\n \n  changeTime = (time) => {\n    this.setState({\n      time: time\n    })\n  }\n\n  getSearchBar = (searchBar) => {\n    this.setState({\n      searchBar: searchBar,\n    })\n  }\n\n  getApi = (api) => {\n    console.log(api);\n    this.setState({\n      api: api\n    }) \n  }\n\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <SearchBar getSearchBar={this.getSearchBar} />\n        <FilterBar getTime={this.changeTime} />\n        <List getApi={this.getApi} searchBar={this.state.searchBar} time={this.state.time} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}